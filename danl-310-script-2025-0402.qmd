---
title: "April 02, 2025 - Class Script"
subtitle: "DANL 310: Introduction to Data Analytics"
author: 
  - name: Byeong-Hak Choe
date: 2025-04-02

execute: 
  echo: true
  eval: true
  warning: false
  message: false
  fig-width: 9
  # fig-height: 5
  
format: 
  html:
    toc: true
    number-sections: true
    code-fold: show       # https://quarto.org/docs/output-formats/html-code.html  
    code-tools: true      # https://quarto.org/docs/reference/cells/cells-jupyter.html
    highlight-style: atom-one # atom-one tango espresso
---

```{r setup}
#| include: false
library(tidyverse)
library(skimr)
library(ggthemes)
library(hrbrthemes)
library(DT)
library(socviz) # textbook r package
# To set default ggplot theme
# theme_set(theme_fivethirtyeight() +
#           theme(strip.background = element_rect(fill="lightgray"),
#                 axis.title.x = 
#                   element_text(angle = 0,
#                                size = rel(1.33),
#                                margin = margin(10,0,0,0)),
#                 axis.title.y = 
#                   element_text(angle = 90,
#                                size = rel(1.33),
#                                margin = margin(0,10,0,0))
#                 )
          # ) # theme_minimal() becomes default
# scale_color_discrete <- function(...) scale_color_tableau(...)
# scale_fill_discrete <- function(...) scale_fill_tableau(...)
```

# Classwork 7 - Question 4

```{r}
holiday_movies <- read_csv("https://bcdanl.github.io/data/holiday_movies.csv")
holiday_movie_genres <- read_csv("https://bcdanl.github.io/data/holiday_movie_genres.csv")
```

## Q4a

Provide the R code to generate the data.frame, holiday_movie_with_genres, which combines the two data.frames, holiday_movies and holiday_movie_genres:


```{r}
holiday_movie_with_genres <- holiday_movie_genres |> 
  left_join(holiday_movies)
```






## Q4b
Provide the R code using skimr::skim() to see how the summary statistics—mean, median, standard deviation, minimum, maximum, first and third quartiles—of `average_rating` and `num_votes` varies by popular genres and `title_type`.

Consider only the five popular genres, which are selected in terms of the number of titles for each `genre`.
Removes the video type of the titles when calculating the summary statistics.

```{r}
popular_genres <- holiday_movie_genres |> 
  count(genres) |> 
  mutate(ranking = dense_rank(-n)) |> 
  filter(ranking <= 5)

unique(holiday_movie_with_genres$title_type)


q4b <- holiday_movie_with_genres |> 
  filter(genres %in% popular_genres$genres,
         title_type != "video") |> 
  group_by(genres, title_type) |> 
  skim(average_rating, num_votes)

```



## Q4c

Provide R code to recreate the ggplot figure illustrating how the relationship between log10(num_votes) and average_rating varies by the popular genres and title_type.

The five popular genres are selected in terms of the number of titles for each genre.
The video type of the titles are removed in the ggplot figure.


```{r}
holiday_movie_with_genres |> 
  filter(genres %in% popular_genres$genres,
         title_type != "video") |> 
  ggplot(aes(x = log10(num_votes),
             y = average_rating)) +
  geom_point(alpha = .2) +
  geom_smooth(aes(color = genres,
                  fill = genres),
              method = 'lm') +
  facet_grid(title_type ~ genres,
             scale = 'free_y')
```


## Q4d
Provide a comment to illustrate how the relationship between log10(num_votes) and average_rating varies by the popular genres and title_type.

- For Romance, the association is positive, for both movie and tvMovie
- For Family, the association is positive for movie, but is negative for tvMovie.



## Q4e

Provide R code to recreate the ggplot figure illustrating the annual trend of the share of number of movies by popular genre from year 1975 to 2022.

- For genres that are not popular, categorize them as “Other”.
- Consider reordering the categories in genres in descending order based on their share in the year 2022.
- Use “Set2” color palette from the RColorBrewer package.


```{r}
popular_genres <- holiday_movie_genres |> 
  count(genres) |> 
  mutate(ranking = dense_rank(-n)) |> 
  filter(ranking <= 5)


q4e <- holiday_movie_with_genres |> 
  mutate(genres = ifelse(genres %in% popular_genres$genres, genres, "Other"))
  
q4e |> count(genres)


```

```{r}
q4e |> 
  filter(year >= 1975, year <= 2022) |> 
  count(year, genres) |> 
  ggplot(aes(x = year, y = n, 
             color = fct_reorder2(genres, year, n),
             fill = fct_reorder2(genres, year, n))) +
  geom_col(position = 'fill') + # 100% stacked bar chart
  scale_fill_brewer(palette = 'Set2') +
  scale_color_brewer(palette = 'Set2') +
  scale_y_percent() +
  guides(fill = guide_legend(keyheight = 2.25,
                             keywidth = 2.25),
         color = 'none') +
  labs(y = "Share of number of movies by genre",
       x = "",
       fill = "Genre",
       title = "How Have Christmas Movie Genres Evolved Over Time?") +
  theme_ipsum() +
  theme(plot.title = element_text(face = 'bold'),
        legend.title = element_text(face = 'bold.italic',
                                    hjust = .5),
        legend.text = element_text(face = 'italic'),
        axis.title.y = element_text(face = 'bold',
                                    margin = margin(0,10,0,0)))
```
```{r}

q4e |> 
  filter(year >= 1975, year <= 2022) |> 
  count(year, genres) |> 
  group_by(year) |> 
  mutate(pct = n / sum(n)) |> 
  ggplot(aes(x = year, y = pct, 
             fill = fct_reorder2(genres, year, pct))) +
  geom_area(position = 'fill')
```


## Q4f

Any comments!

## Q4g
Add the following two variables—christmas and holiday—to the data.frame holiday_movies_with_genres:

christmas:

TRUE if the simple_title includes “christmas”, “xmas”, “x mas”
FALSE otherwise
holiday:

TRUE if the simple_title includes “holiday”
FALSE otherwise


```{r}
holiday_movie_with_genres <- holiday_movie_with_genres |> 
  mutate(christmas = 
           str_detect(simple_title, "christmas") |
           str_detect(simple_title, "xmas") |
           str_detect(simple_title, "x mas"),
         holiday = str_detect(simple_title, "holiday"),
         .after = simple_title
         )

holiday_movie_with_genres <- holiday_movie_with_genres |> 
  relocate(christmas, holiday,
           .after = simple_title)

```


## Q4h
Provide R code to recreate the ggplot figure illustrating the annual trend of (1) the number of movie titles with “holiday” varies by christmas.

```{r}
holiday_movie_with_genres |> 
  count(year, christmas, holiday) |> 
  ggplot(aes(x = year, y = n, color = holiday)) +
  geom_point(alpha = .33) +
  geom_smooth() +
  facet_wrap(~christmas, scale = 'free_y') +
  scale_color_manual(values = c('steelblue', 'darkorange')) +
  theme_ipsum() +
  theme(strip.background = element_rect(fill = 'grey'))
```



## Q4i

Provide R code to recreate the ggplot figure illustrating how the mean value of num_votes varies by the popular genres for the titles with “christmas”.


```{r}
q4i_tmp <- holiday_movie_with_genres |> 
  filter(genres %in% popular_genres$genres) |> 
  group_by(genres, christmas) |> 
  summarise(num_votes = mean(num_votes, na.rm = T)) 

q4i_tmp2 <- q4i_tmp |> 
  filter(christmas == F) |> 
  rename(num_votes2 = num_votes)

q4i <- q4i_tmp |> 
  left_join(q4i_tmp2)

q4i |> 
  ggplot(aes(x = num_votes, y = fct_reorder(genres, num_votes2))) +
  geom_point() +
  facet_wrap(~christmas, scale = 'free') +
  theme_ipsum()
```


# Question 5

```{r}
tripadvisor <- read_csv("https://bcdanl.github.io/data/tripadvisor_cleaned.csv")
```

## Q5a

```{r}

unique(tripadvisor$time)
tripadvisor <- tripadvisor |> 
  mutate(time = factor(time, levels = c("PRE", "POST") ) )
```


## Q5b


```{r}
tripadvisor |> 
  ggplot(aes(x = time, y = days_visited, fill = time)) +
  geom_boxplot() +
  facet_grid(easier_signup ~ became_member)
  


```



## Q5d

```{r}
q5d <- tripadvisor |> 
  pivot_wider(names_from = time,
              values_from = days_visited) |> 
  select(id, PRE, POST, easier_signup, became_member) |> 
  mutate(diff = POST - PRE, .before =PRE)
```



## Q5e
```{r}
q5e <- q5d |> 
  group_by(easier_signup, became_member) |> 
  summarise(mean_diff =  round(mean(diff, na.rm = T), 2))

q5e
```






