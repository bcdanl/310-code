---
title: Lecture 4
subtitle: "DANL 310: Introduction to Data Analytics"
author: 
  - name: Byeong-Hak Choe
date: 2025-02-03

execute: 
  echo: true
  eval: true
  warning: false
  message: false
  fig-width: 9
  # fig-height: 5
  
format: 
  html:
    toc: true
    number-sections: true
    code-fold: show       # https://quarto.org/docs/output-formats/html-code.html  
    code-tools: true      # https://quarto.org/docs/reference/cells/cells-jupyter.html
    highlight-style: atom-one # atom-one tango espresso
---

```{r setup}
#| include: false
library(tidyverse)
library(skimr)
library(ggthemes)
library(hrbrthemes)
library(DT)

# To set default ggplot theme
theme_set( theme_minimal() ) # theme_minimal() becomes default
```

```{r}
library(tidyverse)
mpg <- mpg
diamonds <- diamonds
```

```{r}
ggplot(diamonds, aes(x = price)) +
  geom_histogram()
```



```{r}
ggplot(diamonds, aes(x = price)) +
  geom_histogram(bins = 200)
```



```{r}
ggplot(diamonds, aes(x = price)) +
  geom_histogram(binwidth = 1000)
```


```{r}
ggplot(diamonds, aes(x = price)) +
  geom_histogram(binwidth = 1)
```




```{r}
ggplot(diamonds, aes(x = price)) +
  geom_histogram(binwidth = 1) +
  facet_wrap(~cut)
```



```{r}
ggplot(diamonds, aes(x = price)) +
  geom_histogram(binwidth = 1) +
  facet_wrap(~cut, scales = "free_y")
```


# Log 

```{r}
library(tidyverse)
sale_df <- read_csv(
  "https://bcdanl.github.io/data/home_sales_nyc.csv")
```


```{r}
ggplot(sale_df,
       aes(x = sale.price)) +
  geom_histogram(bins = 100,
                 color = 'black',
                 fill = 'steelblue')
```



```{r}
ggplot(sale_df,
       aes(x = log10(sale.price))) +
  geom_histogram(bins = 100,
                 color = 'black',
                 fill = 'steelblue')
```



# Bar Charts


```{r}
ggplot(diamonds,
       aes(x = cut)) +
  geom_bar()
```


```{r}
# to make a simple data.frame
demo <- tribble(         
  ~cut,         ~freq,
  "Fair",       1610,
  "Good",       4906,
  "Very Good",  12082,
  "Premium",    13791,
  "Ideal",      21551 )

ggplot(data = demo) +
  geom_bar(mapping = 
             aes(x = cut))
```

```{r}
ggplot(demo) +
  geom_bar(aes(x = cut,
               y = freq))
```


```{r}
ggplot(demo) +
  geom_bar(aes(x = cut,
               y = freq),
           stat = "identity")
```


```{r}
ggplot(demo) +
  geom_col(aes(x = cut,   # values from 'column'
               y = freq))
```

```{r}
levels(diamonds$cut)
```


## Prop. bar charts

```{r}
ggplot(diamonds) +
  geom_bar(aes(x = cut,
               y = after_stat(prop)))  # y = ..prop.. or y = stat(prop)
```

```{r}

ggplot(diamonds) +
  geom_bar(aes(x = cut,
               y = after_stat(prop),
               group = 1)
           )
```
```{r}
ggplot(data = diamonds) + 
  stat_summary(
    mapping = aes(x = cut, y = depth),
    fun.min = min,
    fun.max = max,
    fun = median
  )
```




```{r}
ggplot(data = diamonds) + 
  stat_summary(
    mapping = aes(x = cut, y = depth),
    # fun.min = min,
    # fun.max = max,
    fun = median
  )
```




```{r}
ggplot(data = diamonds) + 
  stat_summary(
    mapping = aes(x = cut, y = depth),
    # fun.min = min,
    # fun.max = max,
    fun = mean
  )
```


# Pos Adj
```{r}
ggplot(data = diamonds) + 
  geom_bar(mapping = 
             aes(x = cut, 
                 color = cut))
```


```{r}
ggplot(data = diamonds) + 
  geom_bar(mapping = 
             aes(x = cut, 
                 fill = cut))
```



```{r}
ggplot(data = diamonds) + 
  geom_bar(mapping = 
             aes(x = cut, 
                 fill = cut),
           color = "blue")
```


```{r}
ggplot(data = diamonds) + 
  geom_bar(mapping = 
             aes(x = cut, 
                 fill = cut),
           color = "blue") +
  guides(fill = "none")
```



```{r}
ggplot(data = diamonds) + 
  geom_bar(mapping = 
             aes(x = cut, 
                 fill = cut),
           color = "blue",
           show.legend = F) 
```

### Stacked Bar Charts


```{r}
ggplot(diamonds) +
  geom_bar(aes(x = cut,
               fill = clarity))
```

## 100% Stacked Bar Charts


```{r}
ggplot(diamonds) +
  geom_bar(aes(x = cut,
               fill = clarity),
           position = "fill") +
  labs(y = "Proportion")
```



```{r}
ggplot(diamonds) +
  geom_bar(aes(x = cut,
               fill = clarity),
           position = "stack") # default value for position parameter is "stack"
```



### Clusterd Bar Charts (Side-by-side bar charts)

```{r}

ggplot(diamonds) +
  geom_bar(aes(x = cut,
               fill = clarity),
           position = "dodge") 
```

# Coordinate Sys.


```{r}
ggplot(data = mpg, 
       mapping = 
         aes(x = cty, 
             y = hwy)) + 
  geom_point() + 
  geom_abline() # math: y = ax + b
```

```{r}
ggplot(data = mpg, 
       mapping = 
         aes(x = cty, 
             y = hwy)) + 
  geom_point() + 
  geom_abline()  + # math: y = ax + b
  coord_fixed()
```


# Classwork 4

## Q1c
### (a)

```{r}
ggplot(mpg,
       aes(x = displ,
           y = hwy)) +
  geom_point(alpha = .4) +
  geom_smooth(se = F)
```

### (b)

```{r}
ggplot(mpg,
       aes(x = displ,
           y = hwy)) +
  geom_point() +
  geom_smooth()
```

### (c)

```{r}
ggplot(mpg,
       aes(x = displ,
           y = hwy)) +
  geom_point() +
  geom_smooth()
```

### (d)

```{r}
ggplot(mpg,
       aes(x = displ,
           y = hwy)) +
  geom_point() +
  geom_smooth()
```

### (e)

```{r}
ggplot(mpg,
       aes(x = displ,
           y = hwy)) +
  geom_point() +
  geom_smooth()
```

### (f)

```{r}
ggplot(mpg,
       aes(x = displ,
           y = hwy)) +
  geom_point() +
  geom_smooth()
```


## Q1d
```{r}
organdata_simple <- read_csv('https://bcdanl.github.io/data/organdata_simple.csv')
```




## Q2b



