---
title: Lecture 5
subtitle: "DANL 310: Introduction to Data Analytics"
author: 
  - name: Byeong-Hak Choe
date: 2025-02-05

execute: 
  echo: true
  eval: true
  warning: false
  message: false
  fig-width: 9
  # fig-height: 5
  
format: 
  html:
    toc: true
    number-sections: true
    code-fold: show       # https://quarto.org/docs/output-formats/html-code.html  
    code-tools: true      # https://quarto.org/docs/reference/cells/cells-jupyter.html
    highlight-style: atom-one # atom-one tango espresso
---

```{r setup}
#| include: false
library(tidyverse)
library(skimr)
library(ggthemes)
library(hrbrthemes)
library(DT)

# To set default ggplot theme
theme_set( theme_minimal() ) # theme_minimal() becomes default
```



# Classwork 4

## Q1c
### (a)

```{r}
ggplot(mpg,
       aes(x = displ,
           y = hwy)) +
  geom_point(alpha = .4) +
  geom_smooth(se = T)
```

### (b)

```{r}
mpg <- mpg
ggplot(mpg,
       aes(x = displ,
           y = hwy)) +
  geom_point(alpha = .5) +
  geom_smooth(se = F,
              aes(group = drv))
```

### (c)

```{r}
ggplot(mpg,
       aes(x = displ,
           y = hwy,
           color = drv)) +
  geom_point(alpha = .5) +
  geom_smooth(se = F)
```

### (d)

```{r}
ggplot(mpg,
       aes(x = displ,
           y = hwy)) +
  geom_point(alpha = .5,
             aes(color = drv)) +
  geom_smooth(se = F)
```

### (e)

```{r}
ggplot(mpg,
       aes(x = displ,
           y = hwy)) +
  geom_point(aes(color = drv),
             alpha = .5) +
  geom_smooth(aes(linetype = drv),
              se = F)
```

### (f)

```{r}
ggplot(mpg,
       aes(x = displ,
           y = hwy)) +
  geom_point(color = "white",
             size = 5) +
  geom_point(aes(color = drv),
             alpha = .5) +
  theme_grey()
```


## Q1d

```{r}
organdata_simple <- read_csv('https://bcdanl.github.io/data/organdata_simple.csv')
```

Use the data.frame, `organdata_simple` to visualize the yearly trend of the variable `donors` for each country.

```{r}
#| fig-height: 10
ggplot(organdata_simple,
       aes(x = year,
           y = donors,
           color = country)) +
  geom_point() +
  geom_line() +
  guides(color = "none") +
  facet_wrap(~country)
```


```{r}
#| fig-height: 10
ggplot(organdata_simple,
       aes(x = year,
           y = donors)) +
  geom_col(aes(fill = country)) +
  guides(color = "none",
         fill = "none") +
  facet_wrap(~country)
```




```{r}
#| fig-height: 10
ggplot(organdata_simple,
       aes(x = year,
           y = donors)) +
  geom_col(aes(fill = country)) +
  geom_smooth(se = F) +
  guides(color = "none",
         fill = "none") +
  facet_wrap(~country)
```

## Q2b

```{r}
# install.packages("nycflights13")
flights <- nycflights13::flights
airlines <- nycflights13::airlines

flights <- flights |> 
  left_join(airlines)
```


- Visualize the distribution of `carrier`.

```{r}
ggplot(flights) +
  geom_bar(aes(x = carrier))
```

```{r}
ggplot(flights) +
  geom_bar(aes(y = name))
```


```{r}
airlines_n <- flights |> 
  count(name) |> 
  arrange(-n)

ggplot(airlines_n) +
  geom_col(aes(x = n,
               y = fct_reorder(name, n)))

```


- Visualize how the distribution of carrier varies by origin.


```{r}
ggplot(flights) +
  geom_bar(aes(y = name)) +
  facet_wrap(~origin)
```


```{r}
ggplot(flights) +
  geom_bar(aes(y = name,
               fill = origin)) 
```
- we can also consider sorting this bar chart above.



```{r}
ggplot(flights) +
  geom_bar(aes(y = name,
               fill = origin),
           position = "fill") +
  labs(x = "Proportion")
```


```{r}
#| fig-height: 10
p <- ggplot(flights) +
  geom_bar(aes(y = name,
               fill = origin),
           position = "dodge")
```


```{r bar}
#| fig-height: 10
ggplot(flights) +
  geom_bar(aes(y = name,
               fill = origin),
           position = position_dodge(preserve = "single"))
```


## Question 3

### Q3a.
```{r}
gapminder <- gapminder::gapminder
```

What happens when you put the `geom_smooth()` function before `geom_point()` instead of after it?


```{r}
ggplot(gapminder, 
       aes(x = log10(gdpPercap),
           y = lifeExp)) +
  geom_point(alpha = .2) +
  geom_smooth()
```



```{r}
ggplot(gapminder, 
       aes(x = log10(gdpPercap),
           y = lifeExp)) +
  geom_smooth() +
  geom_point() 
  
```


What does this tell you about how the plot is drawn? Think about how this might be useful when drawing plots.



```{r}
ggplot(gapminder, 
       aes(x = log10(pop),
           y = lifeExp)) +
  geom_point(alpha = .2) +
  geom_smooth() 
```


```{r}
ggplot(gapminder, 
       aes(x = log10(pop),
           y = lifeExp)) +
  geom_point(alpha = .2) +
  geom_smooth(method = lm) +
  facet_wrap(~continent)
```


### Q3b.

Change the mappings in the aes() function so that you plot Life Expectancy against population (`pop`) rather than per capita GDP.
What does that look like?
What does it tell you about the unit of observation in the dataset?





### Q3c.

What happens if you map color to year instead of continent?
Is the result what you expected?
Think about what class of object year is.
Remember you can get a quick look at the top of the data, which includes some shorthand information on the class of each variable, by typing gapminder.
Instead of mapping color = year, what happens if you try color = factor(year)?



```{r}
ggplot(gapminder,
       aes(x = log10(gdpPercap),
           y = lifeExp,
           color = year)) +
  geom_point(alpha = .2) +
  geom_smooth()
```



```{r}
ggplot(gapminder,
       aes(x = log10(gdpPercap),
           y = lifeExp,
           color = factor(year))) +
  geom_point(alpha = .2) +
  geom_smooth()
```

## ggsave

```{r}
p <- ggplot(gapminder,
            aes(x = gdpPercap,
                y = lifeExp))

p_out <- p + geom_point() +
    geom_smooth(method = "loess") +
    scale_x_log10()
ggsave("my_figure.png", plot = p_out,
       width = 2, height = 12)
```


# Show the right number
## Line chart

```{r}
ggplot(gapminder,
       aes(x = year,
           y = gdpPercap)) +
  geom_line()
```


```{r}
ggplot(gapminder,
       aes(x = year,
           y = gdpPercap)) +
  geom_line() +
  geom_point()
```



```{r}
ggplot(gapminder,
       aes(x = year,
           y = gdpPercap,
           group = country)) +
  geom_line()
```




```{r}
df <- gapminder |> 
  filter(country %in% c("United States",
                        "United Kingdom",
                        "China",
                        "Japan",
                        "Canada"))

df |> 
  ggplot(aes(x = year,
             y = gdpPercap,
             color = country)) +
  geom_point(color = "black") +
  geom_line()
```



```{r}
df <- gapminder |> 
  filter(country %in% c("United States",
                        "United Kingdom",
                        "China",
                        "Japan",
                        "Canada"))

df |> 
  ggplot(aes(x = year,
             y = log(gdpPercap),
             color = country)) +
  geom_point(color = "black") +
  geom_line() 
```







