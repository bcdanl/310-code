---
title: "Feb 24, 2025 - Class Script"
subtitle: "DANL 310: Introduction to Data Analytics"
author: 
  - name: Byeong-Hak Choe
date: 2025-03-05

execute: 
  echo: true
  eval: true
  warning: false
  message: false
  fig-width: 9
  # fig-height: 5
  
format: 
  html:
    toc: true
    number-sections: true
    code-fold: show       # https://quarto.org/docs/output-formats/html-code.html  
    code-tools: true      # https://quarto.org/docs/reference/cells/cells-jupyter.html
    highlight-style: atom-one # atom-one tango espresso
---

```{r setup}
#| include: false
library(tidyverse)
library(skimr)
library(ggthemes)
library(hrbrthemes)
library(DT)
library(gapminder)
library(socviz) # textbook r package
library(nycflights13)
# To set default ggplot theme
# theme_set(theme_fivethirtyeight() +
#           theme(strip.background = element_rect(fill="lightgray"),
#                 axis.title.x = 
#                   element_text(angle = 0,
#                                size = rel(1.33),
#                                margin = margin(10,0,0,0)),
#                 axis.title.y = 
#                   element_text(angle = 90,
#                                size = rel(1.33),
#                                margin = margin(0,10,0,0))
#                 )
          # ) # theme_minimal() becomes default
# scale_color_discrete <- function(...) scale_color_tableau(...)
# scale_fill_discrete <- function(...) scale_fill_tableau(...)
```



```{r}
flight_season <- flights |>  mutate(
    summer_month = ifelse(month %in% c(6, 7, 8), TRUE, FALSE))

# flight_season <- flights |>  mutate(
#     summer_month = if_else(month %in% c(6, 7, 8), TRUE, 0))
# 
# flight_season <- flights |>  mutate(  ## ifelse() is less restrictive
#     summer_month = ifelse(month %in% c(6, 7, 8), TRUE, 0))
```



```{r}
flight_season |> 
  select(month, summer_month) |> 
  filter(month == 7)
```


# case_when() - generalized if-else
```{r}
flight_q <- flights |>  
  mutate(
    quater = case_when(
      month %in% c(1,2,3) ~ "Q1",
      month %in% c(4,5,6) ~ "Q2",
      month %in% c(7,8,9) ~ "Q3",
      month %in% c(10,11,12) ~ "Q4"
    )
  )
```

# Ranking

```{r}
rank_me <- tibble( x = c(10, 5, 1, 5, 5, NA) )
rank_me <- rank_me |> 
  mutate(id_x = row_number(x),
         x_min_rank = min_rank(x),
         x_dense_rank = dense_rank(x),,
         x_min_rank_top = min_rank(-x),
         x_dense_rank_top = dense_rank(-x)
         )
```


# Exercise
- Find the 10 most delayed flights using a ranking function. How do you want to handle ties?

## arrange() with head()
```{r}
flights |> 
  arrange(-dep_delay) |> 
  head(10)
```

## min_rank()

```{r}
flights |> 
  mutate(ranking_min = min_rank(-dep_delay)) |> 
  filter(ranking_min <= 20) |> 
  arrange(ranking_min) |> 
  relocate(ranking_min, dep_delay)
```



## dense_rank()

```{r}
flights |> 
  mutate(ranking_dense = dense_rank(-dep_delay)) |> 
  filter(ranking_dense <= 20) |> 
  arrange(ranking_dense) |> 
  relocate(ranking_dense, dep_delay)
```


# summarize

```{r}
flights |> 
  summarize(delay = mean(dep_delay))
```

```{r}
flights |> 
  summarize(delay = mean(dep_delay, na.rm = T))
```


## Group with group_by()

```{r}
flights |> 
  group_by(carrier) |> 
  summarize(mean_dep_delay = mean(dep_delay, na.rm = T))
```


```{r}
flights |> 
  filter(carrier == "9E") |> 
  summarize(mean_dep_delay = mean(dep_delay, na.rm = T))
```


```{r}
flights |> 
  filter(carrier == "AA") |> 
  summarize(mean_dep_delay = mean(dep_delay, na.rm = T))
```







```{r}
by_day <- flights |> group_by(year, month, day)
by_day
```


```{r}
by_day |> 
  summarize(mean_delay = mean(dep_delay, na.rm = T))
```



```{r}
by_dest <- flights |> group_by(dest)
by_dest
```


```{r}
by_dest <- flights |> group_by(dest)
delay <- by_dest |> summarize(
  count = n(),
  dist = mean(distance, na.rm = TRUE),
  delay = mean(arr_delay, na.rm = TRUE)
)
```

```{r}
delay |> 
  ggplot(aes(x = dist, y = delay)) +
  geom_point(aes(size = count), alpha = .3) +
  geom_smooth()
```



```{r}
delay |> 
  filter(dest != "HNL",
         count > 20) |> 
  ggplot(aes(x = dist, y = delay)) +
  geom_point(aes(size = count), alpha = .3) +
  geom_smooth()
```




```{r}
not_cancelled <- flights |> 
  filter(!is.na(dep_delay), !is.na(arr_delay))

not_cancelled |> 
  group_by(year, month, day) |> 
  summarize(mean = mean(dep_delay)) |> 
  filter(!is.na(mean))
```


```{r}
delay <- not_cancelled |> 
  group_by(tailnum) |> 
  summarize(
    n = n(),
    arr_delay_mean = mean(arr_delay, na.rm = T)
  )
delay
```

```{r}
delay |> 
  ggplot(aes(x = arr_delay_mean)) +
  geom_freqpoly(binwidth = 10)
```


```{r}
delay |> 
  ggplot(aes(x = n, y = arr_delay_mean)) +
  geom_point(alpha = .3) +
  geom_smooth()
```




```{r}
delay |> 
  filter(n > 25) |>
  mutate(freq = ifelse(n >= 200, "very freq", "not freq")) |> 
  ggplot(aes(x = n, y = arr_delay_mean)) +
  geom_point(alpha = .3) +
  geom_smooth() +
  geom_smooth(method = lm, color = 'darkorange', fill = 'darkorange') +
  facet_wrap(~freq)
```








```{r}
not_cancelled |> 
  group_by(year, month, day) |> 
  mutate(r = min_rank(desc(dep_time))) |> 
  filter(r %in% range(r) )
```



```{r}
df <- not_cancelled |> 
  group_by(dest) |> 
  summarize(n_carrier = n_distinct(carrier),
            n = n())
```




```{r}
ggplot(data = diamonds) +
  geom_histogram(mapping = aes(x = carat), binwidth = 0.5)

```

```{r}
diamonds |> 
  count(cut_width(carat, 0.5))
```


```{r}
flights |> 
  group_by(dest) |> 
  summarize(n = n())
```



```{r}
flights |> 
  count(dest) 
```





```{r}
flights |> 
  group_by(origin, dest) |> 
  summarize(n = n())
```

```{r}
flights |> 
  count(origin, dest)
```


```{r}
## How many flights left before 5am? 
## (these usually indicate delayed flights from the previous day)
df <- not_cancelled |> 
  group_by(year, month, day) |> 
  summarize(early = dep_time < 500 ) |> 
  group_by(year, month, day) |> 
  summarise(n_early = sum(early))

```


```{r}
not_cancelled |> 
  group_by(year, month, day) |> 
  summarize(hour_prop = mean(arr_delay > 60))
```


```{r}
daily <- flights |> group_by(year, month, day)

(per_day   <- daily |> summarize(flights = n()))

(per_month <- per_day |> summarize(flights = sum(flights)))

(per_year  <- per_month |> summarize(flights = sum(flights)))
```



```{r}
daily |> 
  ungroup() |>             ## no longer grouped by date
  summarize(flights = n())  ## all flights
```


